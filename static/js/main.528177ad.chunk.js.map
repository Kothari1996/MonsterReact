{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBar","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","user","this","filterMosters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAM,SAACC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,OACpB,4BAAIN,EAAMI,QAAQG,aCJjBC,EAAU,SAACR,GAEpB,OACA,qBAAKC,UAAU,YAAf,SACID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNjBM,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBAAOC,KAAK,SACZb,UAAU,SACVW,YAAaA,EACbG,SAAUF,MCiCCG,E,kDAnCb,aAAc,IAAD,8BACX,gBAcFH,aAAa,SAAAI,GACX,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAdpC,EAAKC,MAAM,CACTb,SAAS,GACTU,YAAY,IAJH,E,gEAUO,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACjEF,MAAK,SAAAG,GAAI,OAAE,EAAKT,SAAS,CAACT,SAASkB,S,+BAM7B,IAAD,EACwBC,KAAKN,MAA5Bb,EADD,EACCA,SAASU,EADV,EACUA,YACVU,EAAgBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC3CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpD,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,iBACvBC,aAAee,KAAKf,eACpB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA7BRI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.528177ad.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card-style.css'\r\nexport const Card =(props)=>{\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n            <h1>{ props.monster.name}</h1>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList =(props)=>{\r\n  \r\n    return(\r\n    <div className=\"card-list\">{ \r\n        props.monsters.map(monster=> \r\n            <Card key={monster.id} monster={monster} />\r\n            )\r\n      }</div>\r\n)}","import React from 'react'\r\nimport './search-box.style.css';\r\n\r\n export const SearchBar =({placeholder,handleChange})=>(\r\n    <input type='search'\r\n    className='search' \r\n    placeholder={placeholder}\r\n    onChange={handleChange}/>\r\n   \r\n );\r\n \r\n","import React,{Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBar} from './components/search-box/search-box.component'\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      monsters:[],\n      searchField:''\n    };\n\n   \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(res=>res.json())\n    .then(user=>this.setState({monsters:user}));\n  }\n\n  handleChange=e=>{\n    this.setState({searchField:e.target.value})\n  }\n  render(){\n    const {monsters,searchField} =this.state;\n    const filterMosters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n  return (\n    <div className=\"App\">\n      <h1>Monster Roledex</h1>\n      <SearchBar placeholder='Search Monster'\n      handleChange ={this.handleChange} />\n      <CardList monsters={filterMosters} />\n    </div>\n  );\n}\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}